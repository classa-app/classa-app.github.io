{"version":3,"sources":["User/preview/components/PreviewTab.js","User/shared/components/FormElements/Button.js","User/preview/pages/Preview.js","User/shared/components/Swipe/SwipeTest.js","User/shared/components/UIElements/Mobile.js","User/AppUser.js","Admin/AppAdmin.js","App.js","serviceWorker.js","index.js"],"names":["PreviewLayout","props","className","id","Button","to","gradient","transparent","style","children","onClick","type","href","SwipeCore","use","Pagination","Preview","previewPages","i","push","key","Number","previewActionsRef","useRef","useEffect","current","swiperPagination","document","querySelector","rectPreviewActions","getBoundingClientRect","top","y","pagination","loop","ref","padding","margin","slider","React","createRef","container","isTouchDevice","documentElement","SwipeTest","state","onDrag","e","unmounted","unlocked","isDragging","clientY","endBottomY","endTopY","stopDrag","sliderLeft","Math","min","max","touches","clientX","startX","containerWidth","updateSliderStyle","left","startDrag","target","bottom","getText","text_unlocked","text","onSuccess","console","log","width","clientWidth","setState","reset","addEventListener","this","onMouseDown","onTouchStart","onMouseUp","onTouchEnd","background","Component","Mobile","AppUser","path","exact","component","AppAdmin","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e9fbd8f4.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./PreviewTab.css\";\n\nconst PreviewLayout = (props) => {\n  return (\n    <div className={`preview-tab preview-tab--img${props.id}`}>\n      <div className=\"preview-tab__text\">\n        <p>\n          L'apprentissage fais sa r√©volution.\n          <br />\n          Etudiez directement de chez vous, maintenant\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default PreviewLayout;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./Button.css\";\nconst Button = (props) => {\n  if (props.to) {\n    return (\n      <Link\n        to={props.to}\n        className={`button ${props.gradient && \"button--gradient\"} ${\n          props.transparent && \"button--transparent\"\n        } ${props.className}`}\n        style={props.style}\n      >\n        {props.children}\n      </Link>\n    );\n  }\n  return (\n    <button\n      onClick={props.onClick}\n      className={`button ${props.gradient && \"button--gradient\"} ${\n        props.transparent && \"button--transparent\"\n      } ${props.className}`}\n      type={props.type}\n      href={props.href}\n      style={props.style}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React, { useRef, useEffect } from \"react\";\nimport { Swiper, SwiperSlide } from \"swiper/react\";\n\nimport SwipeCore, { Pagination } from \"swiper\";\nimport \"swiper/swiper-bundle.css\";\nimport \"./Preview.css\";\nimport PreviewTab from \"../components/PreviewTab\";\nimport Button from \"../../shared/components/FormElements/Button\";\n\nSwipeCore.use([Pagination]);\nconst Preview = () => {\n  const previewPages = [];\n  for (let i = 0; i < 3; i++) {\n    previewPages.push(\n      <SwiperSlide key={`slide-${i}`}>\n        <PreviewTab id={Number(i + 1)} />\n      </SwiperSlide>\n    );\n  }\n\n  const previewActionsRef = useRef();\n\n  // style the pagination bullet on top of the buttons\n  useEffect(() => {\n    if (previewActionsRef.current) {\n      const swiperPagination = document.querySelector(\".swiper-pagination\");\n      const rectPreviewActions = previewActionsRef.current.getBoundingClientRect();\n\n      swiperPagination.style.top = rectPreviewActions.y - 10 + \"px\";\n    }\n  }, [previewActionsRef]);\n\n  return (\n    <div className=\"preview\">\n      <div className=\"preview__swipe\">\n        <Swiper pagination loop=\"infinity\" className=\"preview__swipe\" id=\"main\">\n          {previewPages}\n        </Swiper>\n        <div ref={previewActionsRef} className=\"preview__actions\">\n          <div className=\"xdxd\">\n            <span></span>\n            <span></span>\n            <span></span>\n          </div>\n          <Button to=\"/\">Se connecter</Button>\n          <Button to=\"/\" transparent style={{ padding: 0, margin: 0 }}>\n            S'inscrire\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Preview;\n","import React, { Component } from \"react\";\n\nimport \"./SwipeTest.css\";\n\nconst slider = React.createRef();\nconst container = React.createRef();\nconst isTouchDevice = \"ontouchstart\" in document.documentElement;\n\nclass SwipeTest extends Component {\n  state = {};\n\n  componentDidMount() {\n    if (isTouchDevice) {\n      document.addEventListener(\"touchmove\", this.onDrag);\n      document.addEventListener(\"touchend\", this.stopDrag);\n    } else {\n      document.addEventListener(\"mousemove\", this.onDrag);\n      document.addEventListener(\"mouseleave\", this.stopDrag);\n    }\n    this.containerWidth = container.current.clientWidth - 50;\n  }\n\n  onDrag = (e) => {\n    if (this.unmounted || this.state.unlocked) return;\n\n    if (this.isDragging) {\n      if (e.clientY > this.endBottomY || e.clientY < this.endTopY) {\n        this.stopDrag();\n        return;\n      }\n      if (this.isTouchDevice) {\n        this.sliderLeft = Math.min(\n          Math.max(0, e.touches[0].clientX - this.startX),\n          this.containerWidth\n        );\n      } else {\n        this.sliderLeft = Math.min(\n          Math.max(0, e.clientX - this.startX),\n          this.containerWidth\n        );\n      }\n      this.updateSliderStyle();\n    }\n  };\n\n  updateSliderStyle = () => {\n    if (this.unmounted || this.state.unlocked) return;\n    slider.current.style.left = this.sliderLeft + 50 + \"px\";\n  };\n\n  startDrag = (e) => {\n    if (this.unmounted || this.state.unlocked) return;\n\n    this.endBottomY = e.target.getBoundingClientRect().bottom;\n    this.endTopY = e.target.getBoundingClientRect().top;\n    this.isDragging = true;\n    if (isTouchDevice) {\n      this.startX = e.touches[0].clientX;\n    } else {\n      this.startX = e.clientX;\n    }\n  };\n\n  getText = () => {\n    return this.state.unlocked\n      ? this.props.text_unlocked || \"UNLOCKED\"\n      : this.props.text || \"SLIDE\";\n  };\n\n  stopDrag = () => {\n    if (this.unmounted || this.state.unlocked) return;\n\n    if (this.isDragging) {\n      this.isDragging = false;\n      if (this.sliderLeft > this.containerWidth * 0.7) {\n        this.onSuccess();\n        console.log(\"Yay! Swipe succeeded\");\n      } else {\n        this.sliderLeft = 0;\n        console.log(\"NOooOO! Failed to Swipe!\");\n      }\n    }\n    this.updateSliderStyle();\n  };\n\n  onSuccess = () => {\n    slider.current.style.width = container.current.clientWidth + \"px\";\n    this.setState({\n      unlocked: true,\n    });\n  };\n\n  reset = () => {\n    if (this.unmounted) return;\n    this.setState({ unlocked: false }, () => {\n      this.sliderLeft = 0;\n      this.updateSliderStyle();\n    });\n  };\n  componentWillUnmout() {\n    this.unmounted = true;\n  }\n\n  render() {\n    return (\n      <div className=\"ReactSwipeButton\">\n        <div\n          className={\n            \"rsbContainer \" +\n            (this.state.unlocked ? \"rsbContainerUnlocked\" : \"\")\n          }\n          ref={container}\n        >\n          <div\n            className=\"rsbcSlider\"\n            ref={slider}\n            onMouseDown={this.startDrag}\n            onTouchStart={this.startDrag}\n            onMouseUp={this.stopDrag}\n            onTouchEnd={this.stopDrag}\n            style={{\n              background: \"#6AB04C\",\n            }}\n          >\n            <span className=\"rsbcSliderText\">\n              {!this.state.unlocked ? \"Slide To Unlock\" : \"UNLOCKED\"}\n            </span>\n            <span className=\"rsbcSliderArrow\"></span>\n            <span\n              className=\"rsbcSliderCircle\"\n              style={{ background: \"#6AB04C\" }}\n            ></span>\n          </div>\n\n          <div className=\"rsbcText\">Unlock</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SwipeTest;\n","import React from \"react\";\n\nimport \"./Mobile.css\";\nimport SwipeTest from \"../Swipe/SwipeTest\";\nconst Mobile = () => {\n  return (\n    <div className=\"mobile\">\n      <div className=\"block\">\n        <SwipeTest />\n      </div>\n    </div>\n  );\n};\n\nexport default Mobile;\n","import React from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\n\nimport Preview from \"./preview/pages/Preview\";\nimport \"./AppUser.css\";\nimport Mobile from \"./shared/components/UIElements/Mobile\";\nconst AppUser = () => {\n  return (\n    <div className=\"app-user\">\n      <Switch>\n        <Route path=\"/\" exact component={Preview} />\n        <Route path=\"/mobile\" exact component={Mobile} />\n        <Redirect to=\"/\" />\n      </Switch>\n    </div>\n  );\n};\n\nexport default AppUser;\n","import React from \"react\";\n\nconst AppAdmin = () => {\n  return (\n    <div>\n      <h1>Admin</h1>\n    </div>\n  );\n};\n\nexport default AppAdmin;\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\n\nimport AppUser from \"./User/AppUser\";\nimport AppAdmin from \"./Admin/AppAdmin\";\n\nfunction App() {\n  return (\n    <Router>\n      <AppUser />\n      <Route path=\"/admin\" exact component={AppAdmin} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}