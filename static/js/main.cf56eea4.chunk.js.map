{"version":3,"sources":["User/shared/components/Transitions/TransitionKey.js","User/shared/components/FormElements/Button.js","User/preview/components/PreviewLayout.js","User/preview/components/PreviewTab.js","User/preview/pages/Preview.js","User/shared/components/Swipe/SwipeTest.js","User/shared/components/UIElements/Mobile.js","User/AppUser.js","Admin/AppAdmin.js","App.js","serviceWorker.js","index.js"],"names":["TransitionKey","props","TransitionGroup","CSSTransition","timeout","classNames","key","id","children","Button","onClick","className","gradient","transparent","PreviewLayout","undefined","to","PreviewPage","appear","Preview","useState","idPreview","setIdPreview","slider","React","createRef","container","isTouchDevice","document","documentElement","SwipeTest","state","onDrag","e","unmounted","unlocked","isDragging","clientY","endBottomY","endTopY","stopDrag","sliderLeft","Math","min","max","touches","clientX","startX","containerWidth","updateSliderStyle","current","style","left","startDrag","target","getBoundingClientRect","bottom","top","getText","text_unlocked","text","onSuccess","console","log","width","clientWidth","setState","reset","addEventListener","this","ref","onMouseDown","onTouchStart","onMouseUp","onTouchEnd","background","Component","Mobile","AppUser","path","exact","component","AppAdmin","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cf56eea4.chunk.js","sourcesContent":["import React from \"react\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\n\nimport \"./TransitionKey.css\";\nconst TransitionKey = (props) => {\n  return (\n    <TransitionGroup>\n      <CSSTransition\n        timeout={props.timeout}\n        classNames={props.classNames}\n        key={props.id}\n      >\n        {props.children}\n      </CSSTransition>\n    </TransitionGroup>\n  );\n};\n\nexport default TransitionKey;\n","import React from \"react\";\n\nimport \"./Button.css\";\nconst Button = (props) => {\n  return (\n    <button\n      onClick={props.onClick}\n      className={`button ${props.gradient && \"button--gradient\"} ${\n        props.transparent && \"button--transparent\"\n      } ${props.className}`}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./PreviewLayout.css\";\nimport Button from \"../../shared/components/FormElements/Button\";\n\nconst PreviewLayout = (props) => {\n  return (\n    <div\n      onClick={props.onClick}\n      className={`preview-tab preview-tab--${props.id}`}\n    >\n      <div className=\"preview-tab__text\">\n        <p>\n          L'apprentissage fais sa r√©volution.\n          <br />\n          Etudiez directement de chez vous, maintenant\n        </p>\n      </div>\n      <div className=\"preview-tab__actions\">\n        <div className=\"preview-tab__elipses\">\n          <span className={props.id === 1 ? \"active\" : undefined}></span>\n          <span className={props.id === 2 ? \"active\" : undefined}></span>\n          <span className={props.id === 3 ? \"active\" : undefined}></span>\n        </div>\n        <Button className=\"preview-tab__button\" onClick={props.onClick}>\n          Se connecter\n        </Button>\n        <Button\n          className=\"preview-tab__button--transparent\"\n          transparent\n          onClick={props.onClick}\n        >\n          S'inscrire\n        </Button>\n        <Link to=\"/mobile\">Mobile</Link>\n      </div>\n    </div>\n  );\n};\n\nexport default PreviewLayout;\n","import React from \"react\";\n\nimport TransitionKey from \"../../shared/components/Transitions/TransitionKey\";\nimport \"./PreviewTab.css\";\nimport PreviewLayout from \"./PreviewLayout\";\n\nconst PreviewPage = (props) => {\n  return (\n    <TransitionKey\n      timeout={500}\n      appear\n      classNames=\"slide-in-right\"\n      id={props.id}\n    >\n      <PreviewLayout {...props} />\n    </TransitionKey>\n  );\n};\n\nexport default PreviewPage;\n","import React, { useState } from \"react\";\n\nimport PreviewTab from \"../components/PreviewTab\";\n\nconst Preview = () => {\n  const [idPreview, setIdPreview] = useState(1);\n\n  const previewPageHandler = () => {\n    if (idPreview === 1) {\n      setIdPreview(2);\n    } else if (idPreview === 2) {\n      setIdPreview(3);\n    } else {\n      setIdPreview(1);\n    }\n  };\n  return (\n    <div>\n      <PreviewTab id={idPreview} onClick={previewPageHandler} />\n    </div>\n  );\n};\n\nexport default Preview;\n","import React, { Component } from \"react\";\n\nimport \"./SwipeTest.css\";\n\nconst slider = React.createRef();\nconst container = React.createRef();\nconst isTouchDevice = \"ontouchstart\" in document.documentElement;\n\nclass SwipeTest extends Component {\n  state = {};\n\n  componentDidMount() {\n    if (isTouchDevice) {\n      document.addEventListener(\"touchmove\", this.onDrag);\n      document.addEventListener(\"touchend\", this.stopDrag);\n    } else {\n      document.addEventListener(\"mousemove\", this.onDrag);\n      document.addEventListener(\"mouseleave\", this.stopDrag);\n    }\n    this.containerWidth = container.current.clientWidth - 50;\n  }\n\n  onDrag = (e) => {\n    if (this.unmounted || this.state.unlocked) return;\n\n    if (this.isDragging) {\n      if (e.clientY > this.endBottomY || e.clientY < this.endTopY) {\n        this.stopDrag();\n        return;\n      }\n      if (this.isTouchDevice) {\n        this.sliderLeft = Math.min(\n          Math.max(0, e.touches[0].clientX - this.startX),\n          this.containerWidth\n        );\n      } else {\n        this.sliderLeft = Math.min(\n          Math.max(0, e.clientX - this.startX),\n          this.containerWidth\n        );\n      }\n      this.updateSliderStyle();\n    }\n  };\n\n  updateSliderStyle = () => {\n    if (this.unmounted || this.state.unlocked) return;\n    slider.current.style.left = this.sliderLeft + 50 + \"px\";\n  };\n\n  startDrag = (e) => {\n    if (this.unmounted || this.state.unlocked) return;\n\n    this.endBottomY = e.target.getBoundingClientRect().bottom;\n    this.endTopY = e.target.getBoundingClientRect().top;\n    this.isDragging = true;\n    if (isTouchDevice) {\n      this.startX = e.touches[0].clientX;\n    } else {\n      this.startX = e.clientX;\n    }\n  };\n\n  getText = () => {\n    return this.state.unlocked\n      ? this.props.text_unlocked || \"UNLOCKED\"\n      : this.props.text || \"SLIDE\";\n  };\n\n  stopDrag = () => {\n    if (this.unmounted || this.state.unlocked) return;\n\n    if (this.isDragging) {\n      this.isDragging = false;\n      if (this.sliderLeft > this.containerWidth * 0.7) {\n        this.onSuccess();\n        console.log(\"Yay! Swipe succeeded\");\n      } else {\n        this.sliderLeft = 0;\n        console.log(\"NOooOO! Failed to Swipe!\");\n      }\n    }\n    this.updateSliderStyle();\n  };\n\n  onSuccess = () => {\n    slider.current.style.width = container.current.clientWidth + \"px\";\n    this.setState({\n      unlocked: true,\n    });\n  };\n\n  reset = () => {\n    if (this.unmounted) return;\n    this.setState({ unlocked: false }, () => {\n      this.sliderLeft = 0;\n      this.updateSliderStyle();\n    });\n  };\n  componentWillUnmout() {\n    this.unmounted = true;\n  }\n\n  render() {\n    return (\n      <div className=\"ReactSwipeButton\">\n        <div\n          className={\n            \"rsbContainer \" +\n            (this.state.unlocked ? \"rsbContainerUnlocked\" : \"\")\n          }\n          ref={container}\n        >\n          <div\n            className=\"rsbcSlider\"\n            ref={slider}\n            onMouseDown={this.startDrag}\n            onTouchStart={this.startDrag}\n            onMouseUp={this.stopDrag}\n            onTouchEnd={this.stopDrag}\n            style={{\n              background: \"#6AB04C\",\n            }}\n          >\n            <span className=\"rsbcSliderText\">\n              {!this.state.unlocked ? \"Slide To Unlock\" : \"UNLOCKED\"}\n            </span>\n            <span className=\"rsbcSliderArrow\"></span>\n            <span\n              className=\"rsbcSliderCircle\"\n              style={{ background: \"#6AB04C\" }}\n            ></span>\n          </div>\n\n          <div className=\"rsbcText\">Unlock</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SwipeTest;\n","import React from \"react\";\n\nimport \"./Mobile.css\";\nimport SwipeTest from \"../Swipe/SwipeTest\";\nconst Mobile = () => {\n  return (\n    <div className=\"mobile\">\n      <div className=\"block\">\n        <SwipeTest />\n      </div>\n    </div>\n  );\n};\n\nexport default Mobile;\n","import React from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\n\nimport Preview from \"./preview/pages/Preview\";\nimport \"./AppUser.css\";\nimport Mobile from \"./shared/components/UIElements/Mobile\";\nconst AppUser = () => {\n  return (\n    <div className=\"app-user\">\n      <Switch>\n        <Route path=\"/\" exact component={Preview} />\n        <Route path=\"/mobile\" exact component={Mobile} />\n        <Redirect to=\"/\" />\n      </Switch>\n    </div>\n  );\n};\n\nexport default AppUser;\n","import React from \"react\";\n\nconst AppAdmin = () => {\n  return (\n    <div>\n      <h1>Admin</h1>\n    </div>\n  );\n};\n\nexport default AppAdmin;\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\n\nimport AppUser from \"./User/AppUser\";\nimport AppAdmin from \"./Admin/AppAdmin\";\n\nfunction App() {\n  return (\n    <Router>\n      <AppUser />\n      <Route path=\"/admin\" exact component={AppAdmin} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}