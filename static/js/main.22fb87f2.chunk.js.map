{"version":3,"sources":["User/shared/components/Transitions/TransitionKey.js","User/shared/components/FormElements/Button.js","User/preview/components/PreviewLayout.js","User/preview/components/PreviewTab.js","User/preview/pages/Preview.js","User/AppUser.js","Admin/AppAdmin.js","App.js","serviceWorker.js","index.js"],"names":["TransitionKey","props","console","log","TransitionGroup","CSSTransition","timeout","classNames","key","id","children","Button","onClick","className","gradient","PreviewItem","undefined","PreviewPage","Preview","useState","idPreview","setIdPreview","AppUser","path","exact","component","to","AppAdmin","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oYAmBeA,G,MAfO,SAACC,GAErB,OADAC,QAAQC,IAAIF,GAEV,kBAACG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,QAASL,EAAMK,QACfC,WAAYN,EAAMM,WAClBC,IAAKP,EAAMQ,IAEVR,EAAMS,aCGAC,G,kBAbA,SAACV,GACd,OACE,4BACEW,QAASX,EAAMW,QACfC,UAAS,iBAAYZ,EAAMa,UAAY,mBAA9B,YACPb,EAAMY,YAGPZ,EAAMS,YCqBEK,EA3BK,SAACd,GACnB,OACE,yBACEW,QAASX,EAAMW,QACfC,UAAS,mCAA8BZ,EAAMQ,KAE7C,yBAAKI,UAAU,qBACb,oEAEE,6BAFF,iDAMF,yBAAKA,UAAU,wBACb,yBAAKA,UAAU,wBACb,0BAAMA,UAAwB,IAAbZ,EAAMQ,GAAW,cAAWO,IAC7C,0BAAMH,UAAwB,IAAbZ,EAAMQ,GAAW,cAAWO,IAC7C,0BAAMH,UAAwB,IAAbZ,EAAMQ,GAAW,cAAWO,KAE/C,kBAAC,EAAD,CAAQH,UAAU,sBAAsBD,QAASX,EAAMW,SAAvD,mBCTOK,EATK,SAAChB,GAEnB,OADAC,QAAQC,IAAIF,GAEV,kBAAC,EAAD,CAAeK,QAAS,IAAKC,WAAW,iBAAiBE,GAAIR,EAAMQ,IACjE,kBAAC,EAAkBR,KCaViB,EAnBC,WAAO,IAAD,EACcC,mBAAS,GADvB,mBACbC,EADa,KACFC,EADE,KAYpB,OACE,6BACE,kBAAC,EAAD,CAAYZ,GAAIW,EAAWR,QAXJ,WAEvBS,EADgB,IAAdD,EACW,EACU,IAAdA,EACI,EAEA,QCWJE,G,MAdC,WACd,OACE,kBAAC,IAAD,KACE,yBAAKT,UAAU,YACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOU,KAAK,WAAWC,OAAK,EAACC,UAAWP,IAExC,kBAAC,IAAD,CAAUQ,GAAG,kBCPRC,EARE,WACf,OACE,6BACE,uCCmBSC,MAZf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOL,KAAK,IAAIC,OAAK,EAACC,UAAWH,IACjC,kBAAC,IAAD,CAAOC,KAAK,SAASC,OAAK,EAACC,UAAWE,IACtC,kBAAC,IAAD,CAAUD,GAAG,SCNDG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.22fb87f2.chunk.js","sourcesContent":["import React from \"react\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\n\nimport \"./TransitionKey.css\";\nconst TransitionKey = (props) => {\n  console.log(props);\n  return (\n    <TransitionGroup>\n      <CSSTransition\n        timeout={props.timeout}\n        classNames={props.classNames}\n        key={props.id}\n      >\n        {props.children}\n      </CSSTransition>\n    </TransitionGroup>\n  );\n};\n\nexport default TransitionKey;\n","import React from \"react\";\n\nimport \"./Button.css\";\nconst Button = (props) => {\n  return (\n    <button\n      onClick={props.onClick}\n      className={`button ${props.gradient && \"button--gradient\"} ${\n        props.className\n      }`}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\n\nimport \"./PreviewLayout.css\";\nimport Button from \"../../shared/components/FormElements/Button\";\n\nconst PreviewItem = (props) => {\n  return (\n    <div\n      onClick={props.onClick}\n      className={`preview-tab preview-tab--${props.id}`}\n    >\n      <div className=\"preview-tab__text\">\n        <p>\n          L'apprentissage fais sa r√©volution.\n          <br />\n          Etudiez directement de chez vous, maintenant\n        </p>\n      </div>\n      <div className=\"preview-tab__actions\">\n        <div className=\"preview-tab__elipses\">\n          <span className={props.id === 1 ? \"active\" : undefined}></span>\n          <span className={props.id === 2 ? \"active\" : undefined}></span>\n          <span className={props.id === 3 ? \"active\" : undefined}></span>\n        </div>\n        <Button className=\"preview-tab__button\" onClick={props.onClick}>\n          Se connecter\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default PreviewItem;\n","import React from \"react\";\n\nimport TransitionKey from \"../../shared/components/Transitions/TransitionKey\";\nimport \"./PreviewTab.css\";\nimport PreviewLayout from \"./PreviewLayout\";\n\nconst PreviewPage = (props) => {\n  console.log(props);\n  return (\n    <TransitionKey timeout={500} classNames=\"slide-in-right\" id={props.id}>\n      <PreviewLayout {...props} />\n    </TransitionKey>\n  );\n};\n\nexport default PreviewPage;\n","import React, { useState } from \"react\";\n\nimport PreviewTab from \"../components/PreviewTab\";\n\nconst Preview = () => {\n  const [idPreview, setIdPreview] = useState(1);\n\n  const previewPageHandler = () => {\n    if (idPreview === 1) {\n      setIdPreview(2);\n    } else if (idPreview === 2) {\n      setIdPreview(3);\n    } else {\n      setIdPreview(1);\n    }\n  };\n  return (\n    <div>\n      <PreviewTab id={idPreview} onClick={previewPageHandler} />\n    </div>\n  );\n};\n\nexport default Preview;\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\n\nimport Preview from \"./preview/pages/Preview\";\nimport \"./AppUser.css\";\nconst AppUser = () => {\n  return (\n    <Router>\n      <div className=\"app-user\">\n        <Switch>\n          <Route path=\"/preview\" exact component={Preview} />\n\n          <Redirect to=\"/preview\" />\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport default AppUser;\n","import React from \"react\";\n\nconst AppAdmin = () => {\n  return (\n    <div>\n      <h1>Admin</h1>\n    </div>\n  );\n};\n\nexport default AppAdmin;\n","import React from \"react\";\nimport \"./App.css\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\n\nimport AppUser from \"./User/AppUser\";\nimport AppAdmin from \"./Admin/AppAdmin\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" exact component={AppUser} />\n        <Route path=\"/admin\" exact component={AppAdmin} />\n        <Redirect to=\"/\" />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}